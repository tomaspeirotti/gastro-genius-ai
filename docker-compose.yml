version: "3.8"

services:
  # GastroGenius AI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gastro-genius-app
    restart: unless-stopped
    environment:
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-gastro_genius_db}
      POSTGRES_USER: ${POSTGRES_USER:-gastro_genius}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gastro_genius_password}

      # Application Configuration
      SERVER_PORT: 8090
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}

      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-signing-key-change-this-in-production}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}

      # Google AI Configuration
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY:-your-google-gemini-api-key-here}
      GOOGLE_AI_PROJECT_ID: ${GOOGLE_AI_PROJECT_ID:-your-google-cloud-project-id}
      GOOGLE_AI_LOCATION: ${GOOGLE_AI_LOCATION:-us-central1}
      GOOGLE_AI_MODEL: ${GOOGLE_AI_MODEL:-gemini-1.5-pro}
    ports:
      - "${APP_PORT:-8090}:8090"
    volumes:
      - app_logs:/app/logs
    networks:
      - gastro-genius-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:8090/api/actuator/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: gastro-genius-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gastro_genius_db}
      POSTGRES_USER: ${POSTGRES_USER:-gastro_genius}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gastro_genius_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - gastro-genius-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-gastro_genius} -d ${POSTGRES_DB:-gastro_genius_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gastro-genius-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@gastro-genius.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - gastro-genius-network
    depends_on:
      - postgres
    profiles:
      - dev
      - admin

  # Redis for caching (optional for future use)
  redis:
    image: redis:7-alpine
    container_name: gastro-genius-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - gastro-genius-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: gastro-genius-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - gastro-genius-network
    depends_on:
      - app
    profiles:
      - prod

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  gastro-genius-network:
    driver: bridge
